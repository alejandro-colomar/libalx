/******************************************************************************
 *	Copyright (C) 2020	Alejandro Colomar Andr√©s		      *
 *	SPDX-License-Identifier:	LGPL-2.0-only			      *
 ******************************************************************************/


/******************************************************************************
 ******* include guard ********************************************************
 ******************************************************************************/
#pragma once	/* libalx/base/stdint/mask/bit.hpp */


/******************************************************************************
 ******* include **************************************************************
 ******************************************************************************/
#include <climits>
#include <cstdbool>

#include "libalx/base/assert/type.hpp"


/******************************************************************************
 ******* define ***************************************************************
 ******************************************************************************/
#define BIT_SET(x, bit)		(					\
{									\
	auto	x_	= (x);						\
	auto	b_	= (bit);					\
									\
	alx_Static_assert_unsigned(*x_);				\
	alx_assert_bit_fits_type(b_, *x_);				\
									\
	*x_	|= 1ull << b_;						\
	*x_;								\
}									\
)

#define BIT_CLEAR(x, bit)	(					\
{									\
	auto	x_	= (x);						\
	auto	b_	= (bit);					\
									\
	alx_Static_assert_unsigned(*x_);				\
	alx_assert_bit_fits_type(b_, *x_);				\
									\
	*x_	&= ~(1ull << b_);					\
	*x_;								\
}									\
)

#define BIT_FLIP(x, bit)	(					\
{									\
	auto	x_	= (x);						\
	auto	b_	= (bit);					\
									\
	alx_Static_assert_unsigned(*x_);				\
	alx_assert_bit_fits_type(b_, *x_);				\
									\
	*x_	^= 1ull << b_;						\
	*x_;								\
}									\
)

#define BIT_READ(x, bit)	(					\
{									\
	auto	x_	= (x);						\
	auto	b_	= (bit);					\
	bool	r_;							\
									\
	alx_Static_assert_unsigned(x_);					\
	alx_assert_bit_fits_type(b_, x_);				\
									\
	r_	= x_ & (1ull << b_);					\
	r_;								\
}									\
)


/******************************************************************************
 ******* extern "C" ***********************************************************
 ******************************************************************************/
extern	"C"
{
}


/******************************************************************************
 ******* namespace ************************************************************
 ******************************************************************************/
namespace alx {


/******************************************************************************
 ******* enum *****************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* struct / union *******************************************************
 ******************************************************************************/


/******************************************************************************
 ******* prototypes ***********************************************************
 ******************************************************************************/


/******************************************************************************
 ******* namespace ************************************************************
 ******************************************************************************/
}	/* namespace alx */


/******************************************************************************
 ******* end of file **********************************************************
 ******************************************************************************/
