/******************************************************************************
 *	Copyright (C) 2020	Alejandro Colomar Andr√©s		      *
 *	SPDX-License-Identifier:	LGPL-2.0-only			      *
 ******************************************************************************/


/******************************************************************************
 ******* include guard ********************************************************
 ******************************************************************************/
#pragma once	/* libalx/extra/cv/videoio.h */


/******************************************************************************
 ******* headers **************************************************************
 ******************************************************************************/
#include "libalx/extra/cv/core.h"


/******************************************************************************
 ******* macros ***************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* typedef **************************************************************
 ******************************************************************************/
/*
 * These are C++ classes which are accessed through a `void *`.
 * We just pass them around calls to C++  functions wrapped with `void *`,
 * so all the logic is in C++, and we just can't access them in C.
 * These types help visually differentiate between all the `void *`.
 */
typedef	void	cam_s;


/******************************************************************************
 ******* enum *****************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* struct / union *******************************************************
 ******************************************************************************/


/******************************************************************************
 ******* prototypes ***********************************************************
 ******************************************************************************/
/* ----- alloc / free */
__attribute__((nonnull, warn_unused_result))
int	alx_cv_alloc_cam	(cam_s **cam);
__attribute__((nonnull))
void	alx_cv_free_cam		(cam_s *cam);
/* ----- init / deinit */
__attribute__((nonnull(1)))
void	alx_cv_init_cam		(cam_s *restrict cam,
				 const char *restrict dev, int index, int api);
__attribute__((nonnull))
void	alx_cv_deinit_cam	(cam_s *cam);
/* ----- read */
__attribute__((nonnull))
int	alx_cv_cam_read	(img_s *restrict img,
				 cam_s *restrict cam);


/******************************************************************************
 ******* inline ***************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* end of file **********************************************************
 ******************************************************************************/
